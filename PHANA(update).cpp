#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <sstream>
#include <algorithm>

using namespace std;

//   Hàm hash đơn giản 
// sử dụng thuật toán djb2
// nguồn tham khảo: https://stackoverflow.com/questions/19892609/djb2-by-dan-bernstein-for-c
string hashFunction(const string& input) {
    unsigned long hash = 5381;
    for (char c : input)
        hash = ((hash << 5) + hash) + c; // hash * 33 + c
    return to_string(hash);
}

//  Lớp quản lý tài khoản
class UserAccount {
public:
    string username;
    string hashedPassword;
    string fullName;
    string email;
    string phoneNumber;
    bool isAutoGeneratedPassword;

    UserAccount() {}

    UserAccount(string user, string pass, string name, string mail, string phone, bool autoPass = false)
        : username(user), hashedPassword(pass), fullName(name),
          email(mail), phoneNumber(phone), isAutoGeneratedPassword(autoPass) {}

    string toString() const {
        return username + "|" + hashedPassword + "|" + fullName + "|" +
               email + "|" + phoneNumber + "|" + (isAutoGeneratedPassword ? "1" : "0");
    }

    static UserAccount fromString(const string& line) {
        stringstream ss(line);
        string token;
        vector<string> parts;

        while (getline(ss, token, '|'))
            parts.push_back(token);

        return UserAccount(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5] == "1");
    }
};

// ==== Sinh mật khẩu ngẫu nhiên ====
string generateRandomPassword(int length = 8) {
    string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string password = "";
    srand(time(0));
    for (int i = 0; i < length; i++)
        password += chars[rand() % chars.length()]; // lấy ngẫu nhiên kí tự trong chars đến khi đủ length
    return password;
}


// ==== Sinh OTP ====
string generateOTP(int length = 6) {
    srand(time(0));
    string otp = "";
    for (int i = 0; i < length; i++)
        otp += to_string(rand() % 10);
    return otp;
}

// Backup
void backupData() {
    ifstream src("users.txt", ios::binary);
    ofstream dst("backup.txt", ios::binary);

    if (!src || !dst) {
        cout << "Khong the sao luu du lieu!\n";
        return;
    }

    dst << src.rdbuf();
    cout << "Da sao luu du lieu vao file backup.txt\n";
}

// Restore data
void restoreData() {
    ifstream src("backup.txt", ios::binary);
    ofstream dst("users.txt", ios::binary);

    if (!src || !dst) {
        cout << "Khong the phuc hoi du lieu!\n";
        return;
    }

    dst << src.rdbuf();
    cout << "Da phuc hoi du lieu tu backup.txt\n";
}


// ==== Ghi danh sách người dùng ra file ====
void saveToFile(const vector<UserAccount>& users, const string& filename) {
    ofstream file(filename);
    for (const auto& user : users) {
        file << user.toString() << endl;
    }
    file.close();
}

// ==== Đọc danh sách người dùng từ file ====
vector<UserAccount> loadFromFile(const string& filename) {
    vector<UserAccount> users;
    ifstream file(filename);
    string line;
    while (getline(file, line)) {
        users.push_back(UserAccount::fromString(line));
    }
    file.close();
    return users;
}

// ==== Tạo tài khoản mới ====
void createAccount(vector<UserAccount>& users) {
    string username, password, name, email, phone;
    char autoGen;

    cout << "Nhap username: ";
    cin >> username;

    cout << "Co muon he thong tu sinh mat khau? (y/n): ";
    cin >> autoGen;

    if (autoGen == 'y') {
        password = generateRandomPassword();
        cout << "Mat khau tu dong: " << password << endl;
    } else {
        cout << "Nhap mat khau: ";
        cin >> password;
    }

    cout << "Nhap ho ten: ";
    cin.ignore();
    getline(cin, name);
    cout << "Nhap email: ";
    getline(cin, email);
    cout << "Nhap so dien thoai: ";
    getline(cin, phone);

    UserAccount newUser(username, hashFunction(password), name, email, phone, autoGen == 'y');
    users.push_back(newUser);
    saveToFile(users, "users.txt");
    cout << "Tao tai khoan thanh cong!\n";
}

// ==== Dang nhap ====
UserAccount* login(vector<UserAccount>& users) {
    string username, password;
    cout << "Username: ";
    cin >> username;
    cout << "Password: ";
    cin >> password;

    for (auto& user : users) {
        if (user.username == username && user.hashedPassword == hashFunction(password)) {
            cout << "Dang nhap thanh cong!\n";

            if (user.isAutoGeneratedPassword) {
                cout << "Ban dang su dung mat khau tu sinh. Vui long doi mat khau ngay!\n";
                string newPass;
                cout << "Nhap mat khau moi: ";
                cin >> newPass;
                user.hashedPassword = hashFunction(newPass);
                user.isAutoGeneratedPassword = false;
                saveToFile(users, "users.txt");
                cout << "Doi mat khau thanh cong!\n";
            }

            // Sinh OTP khi đăng nhập thành công
            string otp = generateOTP();
            cout << "Ma OTP cua ban (gia lap): " << otp << endl;

            // Lưu tạm OTP vào user
            user.phoneNumber = otp; // dùng trường này tạm giữ OTP (nếu không muốn thay đổi cấu trúc class)
            return &user;
        }
    }

    cout << "Dang nhap that bai! Ten hoac mat khau sai.\n";
    return nullptr;
}


// === thay đổi mk ===
// nguồn tham khảo: https://www.scaler.com/topics/password-generator-cpp/
void changePassword(vector<UserAccount>& users) {
    string username, oldPass, newPass, confirmPass;

    cout << "Nhap ten dang nhap: ";
    cin >> username;

    auto it = find_if(users.begin(), users.end(), [&](const UserAccount& u) {
        return u.username == username;
    });

    if (it == users.end()) {
        cout << "Khong tim thay tai khoan!\n";
        return;
    }

    cout << "Nhap mat khau cu: ";
    cin >> oldPass;

    if (it->hashedPassword != hashFunction(oldPass)) {
        cout << "Mat khau cu khong dung!\n";
        return;
    }

    cout << "Nhap mat khau moi: ";
    cin >> newPass;
    cout << "Nhap lai mat khau moi: ";
    cin >> confirmPass;

    if (newPass != confirmPass) {
        cout << "Mat khau moi khong khop!\n";
        return;
    }

    it->hashedPassword = hashFunction(newPass);
    it->isAutoGeneratedPassword = false;
    saveToFile(users, "users.txt");
    cout << "Doi mat khau thanh cong!\n";
}

// ======Menu User======
void userMenu(vector<UserAccount>& users, UserAccount* currentUser) {
    int choice;

    do {
        cout << "\n===== MENU CHINH =====\n";
        cout << "1. Doi mat khau (voi OTP)\n";
        cout << "2. Sao luu du lieu\n";
        cout << "3. Phuc hoi du lieu\n";
        cout << "0. Dang xuat\n";
        cout << "Chon: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            string otpInput;
            cout << "Nhap OTP da nhan khi dang nhap: ";
            cin >> otpInput;

            if (otpInput != currentUser->phoneNumber) {
                cout << "OTP sai!\n";
                break;
            }

            string newPass, confirmPass;
            cout << "Nhap mat khau moi: ";
            cin >> newPass;
            cout << "Nhap lai mat khau moi: ";
            cin >> confirmPass;

            if (newPass != confirmPass) {
                cout << "Mat khau moi khong khop!\n";
                break;
            }

            currentUser->hashedPassword = hashFunction(newPass);
            currentUser->isAutoGeneratedPassword = false;
            saveToFile(users, "users.txt");
            cout << "Doi mat khau thanh cong!\n";
            break;
        }

        case 2:
            backupData();
            break;

        case 3:
            restoreData();
            users = loadFromFile("users.txt"); // cập nhật lại dữ liệu đã khôi phục
            break;

        case 0:
            cout << "Dang xuat...\n";
            break;

        default:
            cout << "Lua chon khong hop le.\n";
        }

    } while (choice != 0);
}



// ==== Menu ====
void menu() {
    vector<UserAccount> users = loadFromFile("users.txt");
    int choice;

    do {
        cout << "\n===== MENU DANG NHAP =====\n";
        cout << "1. Tao tai khoan moi\n";
        cout << "2. Dang nhap\n";
        cout << "0. Thoat\n";
        cout << "Chon: ";
        cin >> choice;

        switch (choice) {
        case 1:
            createAccount(users);
            break;
        case 2: {
            UserAccount* loggedInUser = login(users);
            if (loggedInUser != nullptr) {
                userMenu(users, loggedInUser);
            }
            break;
        }
        case 0:
            cout << "Tam biet!\n";
            break;
        default:
            cout << "Lua chon khong hop le.\n";
        }
    } while (choice != 0);
}


// ==== Main ====
int main() {
    menu();
    return 0;
}
